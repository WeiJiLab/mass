syntax statement("if" ..@condition {}@then_branch) {
  () = if condition() then { then_branch(); () } else {}
}

syntax statement("if" ..@condition {}@then_branch "else" {}@else_branch) {
  () = if condition() then { then_branch(); () } else { else_branch(); () }
}

// TODO think about a better solution
// It is a bit unfortunate that we have to define this wrapper, however
// otherwise we match the block version of this which will complain that
// will fail parsing (@condition() then) as an expression
syntax statement("if" ..@condition "then" {}@then_branch "else" {}@else_branch) (
  if condition() then then_branch() else else_branch()
)

syntax statement("while" ..@condition {}@body) {
  label _loop_start;
  label placeholder _loop_end;

  syntax statement("break") { goto _loop_end; }
  syntax statement("continue") { goto _loop_start; }
  if condition() {
    body(@scope);
    goto _loop_start;
  }
  label _loop_end;
}

import :: macro (file_path : String) -> (Scope) {
  mass_import(@context, file_path)
}

syntax statement("for" ..@pre ";" ..@condition ";" ..@post {}@body) {
  pre();
  label _loop_start;
  label placeholder _loop_end;
  syntax statement("break") { goto _loop_end; }
  syntax statement("continue") { goto _loop_start; }
  if condition() {
    body(@scope);
    post();
    goto _loop_start;
  }
  label _loop_end;
}

bool :: s8
true :: 1
false :: 0

syntax statement transform("fn" .@name ()@args {}@body) name :: args -> () body
syntax statement transform("const" ..@binding "=" ..@expression) binding := expression
syntax statement transform("mut" ..@binding "=" ..@expression) binding := expression
syntax statement transform("stack" .@name ..@type) name : type
syntax statement transform("static" ..@binding "=" ..@expression) binding :: expression













