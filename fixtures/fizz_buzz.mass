ExitProcess :: (status : s32) -> (s64) external("kernel32.dll", "ExitProcess")
GetStdHandle :: (handle : s32) -> (s64) external("kernel32.dll", "GetStdHandle")
WriteFile :: (
  status : s64,
  buffer : [s8],
  size : s32,
  bytes_written : s64,
  overlapped : s64
) -> (s64) external("kernel32.dll", "WriteFile")

print :: (integer : s64) -> () {
  count := {
    count := 0
    for temp := integer ; temp ; temp = temp / 10 {
      count = count + 1
    }
    if count then count else 1
  }

  buffer : s8[64]
  output_size := if integer < 0 then {
    minus_code :: 0x2d
    buffer.0 = minus_code
    integer = 0 - integer
    count + 1
  } else {
    count
  }

  for integer_index := 0 ; integer_index < count ; {
    integer_index = integer_index + 1
    digit := cast(s8, integer % 10)
    digit_index := output_size - integer_index
    zero_code :: 0x30
    buffer.(digit_index) = zero_code + digit
    integer = integer / 10
  }
  WriteFile(GetStdHandle(-11), &buffer, cast(s32, output_size), 0, 0)
}

fizz_buzz :: () -> () {
  stdout_handle := GetStdHandle(-11)
  for i : s8 = 1; i <= 100; i = i + 1 {
    print_number := true
    if (i % 3 == 0) {
      print_number = false
      WriteFile(stdout_handle, c_string("fizz"), 4, 0, 0)
    }
    if (i % 5 == 0) {
      print_number = false
      WriteFile(stdout_handle, c_string("buzz"), 4, 0, 0)
    }
    if (print_number) {
      print(i)
    }
    WriteFile(stdout_handle, c_string(" "), 1, 0, 0)
  }
}

main :: () -> () {
  fizz_buzz()
  ExitProcess(0)
}
